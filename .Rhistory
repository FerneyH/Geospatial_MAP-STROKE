sex_work_client = ifelse(sex_work_client == 0,"No","Yes"),
drug_dealer = ifelse(drug_dealer == 0,"No","Yes"),
drug_cook = ifelse(drug_cook == 0,"No","Yes"),
thief = ifelse(thief == 0,"No","Yes"),
retired = ifelse(retired == 0,"No","Yes"),
housewife = ifelse(housewife == 0,"No","Yes"),
disabled = ifelse(disabled == 0,"No","Yes"),
unemployed = ifelse(unemployed == 0,"No","Yes"),
homeless = ifelse(homeless == 0,"No","Yes")) %>%
drop_na()
hiv_elist =
read.table("https://myweb.uiowa.edu/dksewell/teaching/SAND/data/HIV-edges.tsv",
header = TRUE)
hiv_elist %<>%
apply(1, function(x) sort(x)) %>%
t()
hiv_elist =
hiv_elist[which(!duplicated(hiv_elist)),] %>%
as_tibble() %>%
rename(from = V1,
to = V2) %>%
filter(from %in% unique(hiv_vlist$id),
to %in% unique(hiv_vlist$id))
hiv =
graph_from_data_frame(hiv_elist,
vertices = hiv_vlist) %>%
as_tbl_graph() %>%
activate(edges) %>%
mutate(from_race = .N()$race[from],
to_race = .N()$race[to],
from_gender = .N()$gender[from],
to_gender = .N()$gender[to],
from_sex_worker = .N()$sex_worker[from],
to_sex_worker = .N()$sex_worker[to],
from_pimp = .N()$pimp[from],
to_pimp = .N()$pimp[to],
from_sex_work_client = .N()$sex_work_client[from],
to_sex_work_client = .N()$sex_work_client[to],
from_drug_dealer = .N()$drug_dealer[from],
to_drug_dealer = .N()$drug_dealer[to],
from_drug_cook = .N()$drug_cook[from],
to_drug_cook = .N()$drug_cook[to],
from_thief = .N()$thief[from],
to_thief = .N()$thief[to],
from_retired = .N()$retired[from],
to_retired = .N()$retired[to],
from_housewife = .N()$housewife[from],
to_housewife = .N()$housewife[to],
from_disabled = .N()$disabled[from],
to_disabled = .N()$disabled[to],
from_unemployed = .N()$unemployed[from],
to_unemployed = .N()$unemployed[to],
from_homeless = .N()$homeless[from],
to_homeless = .N()$homeless[to])
data(rfid,package="igraphdata")
rfid %<>% as_tbl_graph()
rfid =
tbl_graph(nodes =
rfid %>%
activate(nodes) %>%
as_tibble(),
edges =
rfid %>%
activate(edges) %>%
as_tibble() %>%
select(-Time) %>%
count(from,to),
directed = FALSE)
rfid %<>%
activate(edges) %>%
mutate(n = n * 20) %>%
rename(duration = n)
vcount(hiv)
ecount(hiv)
ecount(hiv) /
( vcount(hiv) * (vcount(hiv) - 1) / 2^(!is.directed(hiv)) )
graph.density(hiv)
is_directed(hiv)
transitivity(as.undirected(hiv))
hiv_degrees =
degree(hiv)
hiv_degreeDist = degree_distribution(hiv)
plot(hiv_degreeDist,type='h')
plot(log(hiv_degreeDist)~log(1:length(hiv_degreeDist)))
# Next part is very optional, but helps to illustrate power law
temp_index = which(log(1:length(hiv_degreeDist)) > 2)
temp_x = log(1:length(hiv_degreeDist))[temp_index]
temp_y = log(hiv_degreeDist)[temp_index]
temp_y[which(temp_y == -Inf)] = NA
abline(lm(temp_y~temp_x))
is_connected(hiv)
count_components(hiv)
plot(component_distribution(hiv),type='h')
hiv_gc =
( hiv %>%
to_largest_component() )[[1]]
hiv_gc
is_connected(hiv_gc)
hiv_dists = distances(hiv, mode = "all")
max(hiv_dists)
max(hiv_dists[which(hiv_dists < Inf)])
diameter(as.undirected(hiv))
hiv_gc_dists = distances(hiv_gc, mode="all")
hiv_ecc = apply(hiv_gc_dists,1,max)
print(c(diameter = diameter(as.undirected(hiv_gc)),
`average eccentricity` = mean(hiv_ecc)))
library(assortnet)
assortment.continuous(hiv_A,
degree(hiv, mode = "out"))$r
assortment.continuous(hiv_A,
degree(hiv, mode = "in"))$r
assortment.continuous(hiv_A,
degree(hiv, mode = "all"))$r
knitr::opts_chunk$set(fig.width=12,
fig.height=8,
results='verbatim',
cache=TRUE,
message=F,
warning=F,
progress=FALSE,
echo=TRUE)
library(rgl)
knitr::knit_hooks$set(webgl = hook_webgl)
library(network)
library(igraph)
library(intergraph)
library(ggraph)
library(tidygraph)
library(lubridate)
library(janitor)
library(tidyverse)
library(magrittr)
library(Matrix)
library(RColorBrewer)
hiv_vlist =
read.table("https://myweb.uiowa.edu/dksewell/teaching/SAND/data/HIV-nodes.tsv",
header = TRUE) %>%
clean_names() %>%
mutate(race = ifelse(race == 1,"Native American",
ifelse(race == 2,"Black",
ifelse(race == 3,"Asian/Pacific Islander",
ifelse(race == 4, "White","Other")))),
gender = ifelse(gender == 0, "Male", "Female"),
sex_worker = ifelse(sex_worker == 0, "No","Yes"),
pimp = ifelse(pimp == 0,"No","Yes"),
sex_work_client = ifelse(sex_work_client == 0,"No","Yes"),
drug_dealer = ifelse(drug_dealer == 0,"No","Yes"),
drug_cook = ifelse(drug_cook == 0,"No","Yes"),
thief = ifelse(thief == 0,"No","Yes"),
retired = ifelse(retired == 0,"No","Yes"),
housewife = ifelse(housewife == 0,"No","Yes"),
disabled = ifelse(disabled == 0,"No","Yes"),
unemployed = ifelse(unemployed == 0,"No","Yes"),
homeless = ifelse(homeless == 0,"No","Yes")) %>%
drop_na()
hiv_elist =
read.table("https://myweb.uiowa.edu/dksewell/teaching/SAND/data/HIV-edges.tsv",
header = TRUE)
hiv_elist %<>%
apply(1, function(x) sort(x)) %>%
t()
hiv_elist =
hiv_elist[which(!duplicated(hiv_elist)),] %>%
as_tibble() %>%
rename(from = V1,
to = V2) %>%
filter(from %in% unique(hiv_vlist$id),
to %in% unique(hiv_vlist$id))
hiv =
graph_from_data_frame(hiv_elist,
vertices = hiv_vlist) %>%
as_tbl_graph() %>%
activate(edges) %>%
mutate(from_race = .N()$race[from],
to_race = .N()$race[to],
from_gender = .N()$gender[from],
to_gender = .N()$gender[to],
from_sex_worker = .N()$sex_worker[from],
to_sex_worker = .N()$sex_worker[to],
from_pimp = .N()$pimp[from],
to_pimp = .N()$pimp[to],
from_sex_work_client = .N()$sex_work_client[from],
to_sex_work_client = .N()$sex_work_client[to],
from_drug_dealer = .N()$drug_dealer[from],
to_drug_dealer = .N()$drug_dealer[to],
from_drug_cook = .N()$drug_cook[from],
to_drug_cook = .N()$drug_cook[to],
from_thief = .N()$thief[from],
to_thief = .N()$thief[to],
from_retired = .N()$retired[from],
to_retired = .N()$retired[to],
from_housewife = .N()$housewife[from],
to_housewife = .N()$housewife[to],
from_disabled = .N()$disabled[from],
to_disabled = .N()$disabled[to],
from_unemployed = .N()$unemployed[from],
to_unemployed = .N()$unemployed[to],
from_homeless = .N()$homeless[from],
to_homeless = .N()$homeless[to])
data(rfid,package="igraphdata")
rfid %<>% as_tbl_graph()
rfid =
tbl_graph(nodes =
rfid %>%
activate(nodes) %>%
as_tibble(),
edges =
rfid %>%
activate(edges) %>%
as_tibble() %>%
select(-Time) %>%
count(from,to),
directed = FALSE)
rfid %<>%
activate(edges) %>%
mutate(n = n * 20) %>%
rename(duration = n)
vcount(hiv)
ecount(hiv)
ecount(hiv) /
( vcount(hiv) * (vcount(hiv) - 1) / 2^(!is.directed(hiv)) )
graph.density(hiv)
is_directed(hiv)
transitivity(as.undirected(hiv))
hiv_degrees =
degree(hiv)
hiv_degreeDist = degree_distribution(hiv)
plot(hiv_degreeDist,type='h')
plot(log(hiv_degreeDist)~log(1:length(hiv_degreeDist)))
# Next part is very optional, but helps to illustrate power law
temp_index = which(log(1:length(hiv_degreeDist)) > 2)
temp_x = log(1:length(hiv_degreeDist))[temp_index]
temp_y = log(hiv_degreeDist)[temp_index]
temp_y[which(temp_y == -Inf)] = NA
abline(lm(temp_y~temp_x))
is_connected(hiv)
count_components(hiv)
plot(component_distribution(hiv),type='h')
hiv_gc =
( hiv %>%
to_largest_component() )[[1]]
hiv_gc
is_connected(hiv_gc)
hiv_dists = distances(hiv, mode = "all")
max(hiv_dists)
max(hiv_dists[which(hiv_dists < Inf)])
diameter(as.undirected(hiv))
hiv_gc_dists = distances(hiv_gc, mode="all")
hiv_ecc = apply(hiv_gc_dists,1,max)
print(c(diameter = diameter(as.undirected(hiv_gc)),
`average eccentricity` = mean(hiv_ecc)))
library(assortnet)
hiv_A = as_adjacency_matrix(hiv)
hiv_df =
hiv %>%
activate(nodes) %>%
as_tibble()
assortment.discrete(hiv_A,
hiv_df$drug_dealer,
weighted=F)$r
assortment.discrete(hiv_A,
hiv_df$drug_cook,
weighted=F)$r
assortment.discrete(hiv_A,
hiv_df$disabled,
weighted=F)$r
assortment.discrete(hiv_A,
hiv_df$homeless,
weighted=F)$r
assortment.discrete(hiv_A,
hiv_df$unemployed,
weighted=F)$r
assortment.continuous(hiv_A,
degree(hiv, mode = "out"))$r
assortment.continuous(hiv_A,
degree(hiv, mode = "in"))$r
assortment.continuous(hiv_A,
degree(hiv, mode = "all"))$r
vcount(rfid)
ecount(rfid)
graph.density(rfid)
is_directed(rfid)
transitivity(as.undirected(rfid))
hiv_degrees =
degree(rfid)
hiv_degrees
rfid_degreeDist = degree_distribution(rfid)
plot(rfid_degreeDist,type='h')
plot(log(rfid_degreeDist)~log(1:length(rfid_degreeDist)))
# Next part is very optional, but helps to illustrate power law
temp_index = which(log(1:length(rfid_degreeDist)) > 2)
temp_x = log(1:length(rfid_degreeDist))[temp_index]
temp_y = log(rfid_degreeDist)[temp_index]
temp_y[which(temp_y == -Inf)] = NA
abline(lm(temp_y~temp_x))
count_components(hiv)
plot(component_distribution(hiv),type='h')
count_components(rfid)
plot(component_distribution(rfid),type='h')
count_components(rfid)
count_components(hiv)
is_connected(rfid)
hiv_gc =
( hiv %>%
to_largest_component() )[[1]]
hiv_gc
is_connected(hiv_gc)
hiv_dists = distances(hiv, mode = "all")
hiv_dists
hiv_gc_dists = distances(hiv_gc, mode="all")
hiv_ecc = apply(hiv_gc_dists,1,max)
print(c(diameter = diameter(as.undirected(hiv_gc)),
`average eccentricity` = mean(hiv_ecc)))
hiv_ecc
rfid_A = as_adjacency_matrix(rfid)
rfid_df =
rfid %>%
activate(nodes) %>%
as_tibble()
rfid_df
rfid_A
rfid_df
knitr::opts_chunk$set(fig.width=12,
fig.height=8,
results='verbatim',
cache=TRUE,
message=F,
warning=F,
progress=FALSE,
echo=TRUE)
library(rgl)
knitr::knit_hooks$set(webgl = hook_webgl)
library(network)
library(igraph)
library(intergraph)
library(ggraph)
library(tidygraph)
library(lubridate)
library(janitor)
library(tidyverse)
library(magrittr)
library(Matrix)
library(RColorBrewer)
hiv_vlist =
read.table("https://myweb.uiowa.edu/dksewell/teaching/SAND/data/HIV-nodes.tsv",
header = TRUE) %>%
clean_names() %>%
mutate(race = ifelse(race == 1,"Native American",
ifelse(race == 2,"Black",
ifelse(race == 3,"Asian/Pacific Islander",
ifelse(race == 4, "White","Other")))),
gender = ifelse(gender == 0, "Male", "Female"),
sex_worker = ifelse(sex_worker == 0, "No","Yes"),
pimp = ifelse(pimp == 0,"No","Yes"),
sex_work_client = ifelse(sex_work_client == 0,"No","Yes"),
drug_dealer = ifelse(drug_dealer == 0,"No","Yes"),
drug_cook = ifelse(drug_cook == 0,"No","Yes"),
thief = ifelse(thief == 0,"No","Yes"),
retired = ifelse(retired == 0,"No","Yes"),
housewife = ifelse(housewife == 0,"No","Yes"),
disabled = ifelse(disabled == 0,"No","Yes"),
unemployed = ifelse(unemployed == 0,"No","Yes"),
homeless = ifelse(homeless == 0,"No","Yes")) %>%
drop_na()
hiv_elist =
read.table("https://myweb.uiowa.edu/dksewell/teaching/SAND/data/HIV-edges.tsv",
header = TRUE)
hiv_elist %<>%
apply(1, function(x) sort(x)) %>%
t()
hiv_elist =
hiv_elist[which(!duplicated(hiv_elist)),] %>%
as_tibble() %>%
rename(from = V1,
to = V2) %>%
filter(from %in% unique(hiv_vlist$id),
to %in% unique(hiv_vlist$id))
hiv =
graph_from_data_frame(hiv_elist,
vertices = hiv_vlist) %>%
as_tbl_graph() %>%
activate(edges) %>%
mutate(from_race = .N()$race[from],
to_race = .N()$race[to],
from_gender = .N()$gender[from],
to_gender = .N()$gender[to],
from_sex_worker = .N()$sex_worker[from],
to_sex_worker = .N()$sex_worker[to],
from_pimp = .N()$pimp[from],
to_pimp = .N()$pimp[to],
from_sex_work_client = .N()$sex_work_client[from],
to_sex_work_client = .N()$sex_work_client[to],
from_drug_dealer = .N()$drug_dealer[from],
to_drug_dealer = .N()$drug_dealer[to],
from_drug_cook = .N()$drug_cook[from],
to_drug_cook = .N()$drug_cook[to],
from_thief = .N()$thief[from],
to_thief = .N()$thief[to],
from_retired = .N()$retired[from],
to_retired = .N()$retired[to],
from_housewife = .N()$housewife[from],
to_housewife = .N()$housewife[to],
from_disabled = .N()$disabled[from],
to_disabled = .N()$disabled[to],
from_unemployed = .N()$unemployed[from],
to_unemployed = .N()$unemployed[to],
from_homeless = .N()$homeless[from],
to_homeless = .N()$homeless[to])
data(rfid,package="igraphdata")
rfid %<>% as_tbl_graph()
rfid =
tbl_graph(nodes =
rfid %>%
activate(nodes) %>%
as_tibble(),
edges =
rfid %>%
activate(edges) %>%
as_tibble() %>%
select(-Time) %>%
count(from,to),
directed = FALSE)
rfid %<>%
activate(edges) %>%
mutate(n = n * 20) %>%
rename(duration = n)
vcount(hiv)
ecount(hiv)
ecount(hiv) /
( vcount(hiv) * (vcount(hiv) - 1) / 2^(!is.directed(hiv)) )
graph.density(hiv)
is_directed(hiv)
transitivity(as.undirected(hiv))
hiv_degrees =
degree(hiv)
hiv_degreeDist = degree_distribution(hiv)
plot(hiv_degreeDist,type='h')
plot(log(hiv_degreeDist)~log(1:length(hiv_degreeDist)))
# Next part is very optional, but helps to illustrate power law
temp_index = which(log(1:length(hiv_degreeDist)) > 2)
temp_x = log(1:length(hiv_degreeDist))[temp_index]
temp_y = log(hiv_degreeDist)[temp_index]
temp_y[which(temp_y == -Inf)] = NA
abline(lm(temp_y~temp_x))
is_connected(hiv)
count_components(hiv)
plot(component_distribution(hiv),type='h')
hiv_gc =
( hiv %>%
to_largest_component() )[[1]]
hiv_gc
is_connected(hiv_gc)
hiv_dists = distances(hiv, mode = "all")
max(hiv_dists)
max(hiv_dists[which(hiv_dists < Inf)])
diameter(as.undirected(hiv))
hiv_gc_dists = distances(hiv_gc, mode="all")
hiv_ecc = apply(hiv_gc_dists,1,max)
print(c(diameter = diameter(as.undirected(hiv_gc)),
`average eccentricity` = mean(hiv_ecc)))
library(assortnet)
hiv_A = as_adjacency_matrix(hiv)
hiv_df =
hiv %>%
activate(nodes) %>%
as_tibble()
assortment.discrete(hiv_A,
hiv_df$drug_dealer,
weighted=F)$r
assortment.discrete(hiv_A,
hiv_df$drug_cook,
weighted=F)$r
assortment.discrete(hiv_A,
hiv_df$disabled,
weighted=F)$r
assortment.discrete(hiv_A,
hiv_df$homeless,
weighted=F)$r
assortment.discrete(hiv_A,
hiv_df$unemployed,
weighted=F)$r
assortment.continuous(hiv_A,
degree(hiv, mode = "out"))$r
assortment.continuous(hiv_A,
degree(hiv, mode = "in"))$r
assortment.continuous(hiv_A,
degree(hiv, mode = "all"))$r
vcount(rfid)
ecount(rfid)
graph.density(rfid)
is_directed(rfid)
transitivity(as.undirected(rfid))
hiv_degrees =
degree(rfid)
rfid_degreeDist = degree_distribution(rfid)
plot(rfid_degreeDist,type='h')
plot(log(rfid_degreeDist)~log(1:length(rfid_degreeDist)))
# Next part is very optional, but helps to illustrate power law
temp_index = which(log(1:length(rfid_degreeDist)) > 2)
temp_x = log(1:length(rfid_degreeDist))[temp_index]
temp_y = log(rfid_degreeDist)[temp_index]
temp_y[which(temp_y == -Inf)] = NA
abline(lm(temp_y~temp_x))
count_components(rfid)
plot(component_distribution(rfid),type='h')
rfid
library("inla")
library("sf")
setwd("C:/Users/fhenaoceballos/Documents/R/gdp/R")
setwd("C:/Users/fhenaoceballos/Documents/R/gdp")
devtools::check()
pkgbuild::check_build_tools(debug = TRUE)
